x1 <- c(0, 0, 1, 1)
x2 <- c(0, 1, 0, 1)
logic <- data.frame(x1, x2)
logic$AND <- as.numeric(x1 & x2)
logic
library(neuralnet)
set.seed(123)
AND <- c(rep(0, 3), 1)
binary.data <- data.frame(expand.grid(c(0, 1), c(0, 1)), AND)
net <- neuralnet(AND ~ Var1 + Var2, binary.data, hidden = 0,
err.fct = "ce", linear.output = FALSE)
plot(net, rep = "best") # Building a Simple Neural Network by Using R
prediction(net)
AND
set.seed(123)
AND <- c(rep(0, 7), 1)
OR <- c(0, rep(1, 7))
binary.data <- data.frame(expand.grid(c(0, 1), c(0, 1), c(0,
1)), AND, OR)
net <- neuralnet(AND + OR ~ Var1 + Var2 + Var3, binary.data,
hidden = 0, err.fct = "ce", linear.output = FALSE)
plot(net, rep = "best")
prediction(net)
knitr::opts_chunk$set(echo = TRUE)
print(L1)
L1 = list(1:6, "abc")
print(L1)
length(L1)
L2 <- list(minuscules = letters, majuscules = LETTERS, mois = month.name)
print(L2)
L = list(L1, L2)
print(L)
str(L1, L2)
str(L)
df <- data.frame(sexe = c("f", "f", "h", "h"), age = c(52, 31, 29, 35), blond = c(FALSE,
TRUE, TRUE, FALSE))
print(df)
df <- data.frame(sexe = c("fe", "fe", "ho", "ho"), age = c(52, 31, 29, 35),
blond = c(FALSE, TRUE, TRUE, FALSE))
print(df)
str(df)
row.names(df) <- c("Henri", "Bertin", "Jonas", "Benedict")
print(df)
library(questionr)
library(questionr)
install.packages("questionr")
library(mtcars)
questionr
data("mtcars")
View(data)
mtcars
d <- mtcars
View(d)
head(d)
tail(d)
library(dplyr)
glimpse(d)
summary(d)
summary(d$mpg)
library(ggplot2)
ggplot(d) + geom_boxplot(aes(x = mpg, y = cyl))
ggplot(d) + geom_boxplot(aes(x = variavel, y = data))
library(data.table)
iris2 <- as.data.table(iris)
class(iris2)
setDT(iris)
class(iris)
class(iris)
install.packages("dtplyr")
library(dtplyr)
iris_dt <- tbl_dt(iris)
class(iris_dt)
iris2[Sepal.Length < 5]
iris2[, Sepal.Length]
iris2[, list(Sepal.Length, Sepal.Width)]
hdv2003
library(questionr)
install.packages("questionr")
install.packages("haven")
install.packages("haven")
q()
library(limSolve)
def = function(t, state, parameters) {
with(as.list(c(state, parameters)), {
M = sqrt(1/3*(1/2*dy^2 + 1/2*y^2))
dz = M*z # dz/dt
ddy = -3*M*dy - y # ddy/dt
list(c(dy, ddy, dz))
})
}
state = c(y = 1, dy = -0.1, z = 1)
times = seq(0, 100, length.out = 10001)
??ode
?ode
?ode
sol = ode(func = def, y = state, times = times, parms = NULL)
??deSolve
library(deSolve)
sol = ode(func = def, y = state, times = times, parms = NULL)
y = sol[, "y"]
dy = sol[, "dy"]
z = sol[, "z"]
M = sqrt(1/3*(1/2*dy^2 + 1/2*y^2))
plot(times, z, col = "red", ylim = c(-1, 18), type = "l")
lines(times, y, col = "blue")
lines(times, M, col = "green")
grid()
knitr::opts_chunk$set(echo = TRUE)
library(limSolve)
library(deSolve)
def = function(t, state, parameters) {
with(as.list(c(state, parameters)), {
M = sqrt(1/3*(1/2*dy^2 + 1/2*y^2))
dz = M*z # dz/dt
ddy = -3*M*dy - y # ddy/dt
list(c(dy, ddy, dz))
})
}
state = c(y = 1, dy = -0.1, z = 1)
times = seq(0, 100, length.out = 10001)
sol = ode(func = def, y = state, times = times, parms = NULL)
y = sol[, "y"]
dy = sol[, "dy"]
z = sol[, "z"]
M = sqrt(1/3*(1/2*dy^2 + 1/2*y^2))
plot(times, z, col = "red", ylim = c(-1, 18), type = "l")
lines(times, y, col = "blue")
plot(times, z, col = "red", ylim = c(-1, 18), type = "l")
lines(times, y, col = "blue")
library(limSolve)
library(deSolve)
def = function(t, state, parameters) {
with(as.list(c(state, parameters)), {
M = sqrt(1/3*(1/2*dy^2 + 1/2*y^2))
dz = M*z # dz/dt
ddy = -3*M*dy - y # ddy/dt
list(c(dy, ddy, dz))
})
}
state = c(y = 1, dy = -0.1, z = 1)
times = seq(0, 100, length.out = 10001)
sol = ode(func = def, y = state, times = times, parms = NULL)
y = sol[, "y"]
dy = sol[, "dy"]
z = sol[, "z"]
M = sqrt(1/3*(1/2*dy^2 + 1/2*y^2))
plot(times, z, col = "red", ylim = c(-1, 18), type = "l")
lines(times, y, col = "blue")
lines(times, M, col = "green")
grid()
diff = function(t, y, mu) {
list(c(y[2], mu * (1 - y[1]^2) * y[2] - y[1]))
}
library(deSolve)
Yiff = c(y1 = 2, y2 = 0)
tiff = ode(y = Yiff, func = diff, times = 0:3000, parms = 1000)
nontiff <- ode(y = Yiff, func = diff, times = seq(0, 30, by = 0.01),
parms = 1)
head(tiff, n = 3)
head(nontiff, n = 3)
plot(tiff, type = "l", which = "y1", lwd = 2, ylab = "y")
plot(tiff, type = "l", which = "y1", lwd = 2, ylab = "y",
main = "IVP ODE, tiff")
plot(nontiff, type = "l", which = "y2", lwd =  2, ylab = "y",
main = "IVP ODE, nontiff")
prob14 = function(x, y, xi) {
list(c(y[2], 1/xi * (y[1] - (xi * pi^2 + 1) * cos(pi*x))
))
}
library(bvpSolve)
library(bvpSolve)
X = seq(-1, 1, by = 0.01)
shoot = bvpshoot(yini = c(0, NA), yend = c(0, NA), x = X, parms = 0.01,
func = prob14)
twp = bvptwp(yini = c(0, NA), yend = c(0, NA), x = X, parms = 0,0025,
func = prob14)
prob14 = function(x, y, xi) {
list(c(y[2], 1/xi * (y[1] - (xi * pi^2 + 1) * cos(pi*x))
))
}
library(bvpSolve)
X = seq(-1, 1, by = 0.01)
shoot = bvpshoot(yini = c(0, NA), yend = c(0, NA), x = X, parms = 0.01,
func = prob14)
twp = bvptwp(yini = c(0, NA), yend = c(0, NA), x = X, parms = 0,0025,
func = prob14)
shoot <- bvpshoot(yini = c(0, NA),
yend = c(0, NA), x = x, parms = 0.01,
func = Prob14)
shoot = bvpshoot(yini = c(0, NA), yend = c(0, NA), x = X, parms = 0.01,
func = prob14, length(sum(X)))
Prob14 <- function(x, y, xi) {
list(c(
y[2],
1/xi * (y[1] - (xi*pi*pi+1) * cos(pi*x))
))
}
x <- seq(-1, 1, by = 0.01)
shoot <- bvpshoot(yini = c(0, NA),
yend = c(0, NA), x = x, parms = 0.01,
func = Prob14)
twp <- bvptwp(yini = c(0, NA), yend = c(0,
NA), x = x, parms = 0.0025,
func = Prob14)
coll <- bvpcol(yini = c(0, NA),
yend = c(0, NA), x = x, parms = 1e-04,
func = Prob14)
prob14 = function(x, y, xi) {
list(c(y[2], 1/xi * (y[1] - (xi * pi^2 + 1) * cos(pi*x))
))
}
library(bvpSolve)
x <- seq(-1, 1, by = 0.01)
shoot <- bvpshoot(yini = c(0, NA),
yend = c(0, NA), x = x, parms = 0.01,
func = Prob14)
twp <- bvptwp(yini = c(0, NA), yend = c(0,
NA), x = x, parms = 0.0025,
func = Prob14)
coll <- bvpcol(yini = c(0, NA),
yend = c(0, NA), x = x, parms = 1e-04,
func = Prob14)
xi <- 0.0025
analytic <- cos(pi * x) + exp((x - 1)/sqrt(xi)) + exp(-(x + 1)/sqrt(xi))
max(abs(analytic - twp[, 2]))
plot(shoot[, 1], shoot[, 2], type = "l", lwd = 2, ylim = c(-1, 1), col = "blue",
xlab = "x", ylab = "y", main = "BVP ODE")
lines(twp[, 1], twp[, 2], col = "red", lwd = 2)
lines(coll[, 1], coll[, 2], col = "green", lwd = 2)
legend("topright", legend = c("0.01", "0.0025", "0.0001"),
col = c("blue", "red", "green"), title = expression(xi), lwd = 2)
plot(shoot[, 1], shoot[, 2], type = "l", lwd = 2, ylim = c(-1, 1), col = "blue",
xlab = "x", ylab = "y", main = "BVP ODE")
lines(twp[, 1], twp[, 2], col = "red", lwd = 2)
lines(coll[, 1], coll[, 2], col = "green", lwd = 2)
daefun <- function(t, y, dy, parms) {
res1 <- - dy[1] - 0.04 * y[1] + 1e4 * y[2] * y[3]
res2 <- - dy[2] + 0.04 * y[1] - 1e4 * y[2] * y[3] - 3e7 * y[2]^2
res3 <- y[1] + y[2] + y[3] - 1
list(c(res1, res2, res3),
error = as.vector(y[1] + y[2] + y[3]) - 1)
}
yini <- c(y1 = 1, y2 = 0, y3 = 0)
dyini <- c(-0.04, 0.04, 0)
times <- 10 ^ seq(-6,6,0.1)
print(system.time(out <-daspk(y = yini, dy = dyini, times = times, res = daefun,
parms = NULL)))
plot(out, ylab = "conc.", xlab = "time", type = "l", lwd = 2, log = "x")
print(system.time(out <-daspk(y = yini, dy = dyini, times = times, res = daefun,
parms = NULL)))
plot(out, ylab = "conc.", xlab = "time", type = "l", lwd = 2, log = "x")
mtext("IVP DAE", side = 3, outer = TRUE, line = -1)
library(ReacTran)
library(ReacTran)
Grid = setup.grid.1D(N = 1000, L = 10)
pde1D <-function(t, C, parms) {
tran <- tran.1D(C = C, D = D, C.down = Cext, dx = Grid)$dC
list(tran - Q) # return value: rate of change
}
D <- 1
Q <- 1
Cext <- 20
print(system.time(std <- steady.1D(y = runif(Grid$N), func = pde1D,
parms = NULL, nspec = 1)))
plot (Grid$x.mid, std$y, type = "l", lwd = 2, main = "steady-state PDE",
xlab = "x", ylab = "C", col = "red")
par(mfrow = c(1, 1))
plot (Grid$x.mid, std$y, type = "l", lwd = 2, main = "steady-state PDE",
xlab = "x", ylab = "C", col = "red")
analytical <- Q/2/D*(Grid$x.mid^2 - 10^2) + Cext
max(abs(analytical - std$y))
system.time(out <- ode.1D(y = rep(1, Grid$N), times = times, func = pde1D,
parms = NULL, nspec = 1))
require(deSolve)
times <- seq(0, 100, by = 1)
system.time(out <- ode.1D(y = rep(1, Grid$N), times = times, func = pde1D,
parms = NULL, nspec = 1))
tail(out[, 1:4], n = 3)
image(out, xlab = "time, days", ylab = "Distance, cm", main = "PDE",
add.contour = TRUE)
load("/home/henri/.cache/.fr-FUCEVL/deSolve/data/ccl4data.rda")
aquaphy <- function(times, y, parms, PAR=NULL, ...) {
if (length(y) != 4)
stop ("length of state variable vector should be 4")
if (length(parms) != 19)
stop ("length of parameter vector should be 19")
names(y) <- c("DIN","PROTEIN","RESERVE","LMW")
outnames <- c("PAR","TotalN","PhotoSynthesis",
"NCratio","ChlCratio","Chlorophyll")
if (is.null(PAR))
ode(y,times,dllname="deSolve",
func="aquaphy",initfunc="iniaqua",
parms=parms,nout=6,outnames=outnames,...)
else
ode(y,times,dllname="deSolve",
func="aquaphyforc",initfunc="iniaqua",
initforc="initaqforc",forcings=PAR,
parms=parms,nout=6,outnames=outnames,...)
}
###################################################
### preliminaries
###################################################
par(mfrow=c(1,1))
library("deSolve")
options(prompt = "  ")
options(width=70)
###################################################
### 0-D Prey-Consumer model
###################################################
## 1) model function
LVmod0D <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
IngestC <- rI * P * C
GrowthP <- rG * P * (1 - P/K)
MortC   <- rM * C
dP    <- GrowthP - IngestC
dC    <- IngestC * AE - MortC
return(list(c(dP, dC)))
})
}
## 2) parameters, start values, times, simulation
pars    <- c(rI = 0.2,    # /day, rate of ingestion
rG = 1.0,    # /day, growth rate of prey
rM = 0.2 ,   # /day, mortality rate of consumer
AE = 0.5,    # -, assimilation efficiency
K  = 10)     # mmol/m3, carrying capacity
yini    <- c(P = 1, C = 2)
times   <- seq(0, 200, by = 1)
print(system.time(
out     <- ode(func = LVmod0D, y = yini,
parms = pars, times = times)))
head(out, n=3)
## 3) plot simulation results
matplot(out[,"time"], out[,2:3], type = "l", xlab = "time", ylab = "Conc",
main = "Lotka-Volterra", lwd = 2)
legend("topright", c("prey", "consumer"), col = 1:2, lty = 1:2)
###################################################
### 0-D Prey-Consumer model with a root
###################################################
rootfun <- function(Time, State, Pars) {
dstate <- unlist(LVmod0D(Time, State, Pars))
sum(abs(dstate)) - 1e-4
}
out <- lsodar(func = LVmod0D, y = yini, parms = pars,
times = times, rootfun = rootfun)
tail(out, n = 2)
###################################################
### 1-D Prey-Consumer model
###################################################
LVmod1D <- function (time, state, parms, N, Da, dx) {
with (as.list(parms), {
P <- state[1:N]
C <- state[-(1:N)]
## Dispersive fluxes; zero-gradient boundaries
FluxP <- -Da * diff(c(P[1], P, P[N]))/dx
FluxC <- -Da * diff(c(C[1], C, C[N]))/dx
## Biology: Lotka-Volterra dynamics
IngestC  <- rI * P * C
GrowthP  <- rG * P * (1- P/K)
MortC    <- rM * C
## Rate of change = -Flux gradient + Biology
dP   <- -diff(FluxP)/dx + GrowthP - IngestC
dC   <- -diff(FluxC)/dx + IngestC * AE - MortC
return (list(c(dP, dC)))
})
}
R  <- 20                    # total length of surface, m
N  <- 1000                  # number of boxes
dx <- R/N                   # size of box in x-direction
Da <- 0.05                  # m2/d, dispersion coefficient
yini    <- rep(0, 2*N)
yini[500:501] <- yini[1500:1501] <- 10
times  <-seq(0, 200, by = 1)
print(system.time(
out    <- ode.1D(y = yini, times = times, func = LVmod1D,
parms = pars, nspec = 2,
N = N, dx = dx, Da = Da)
))
P   <- out[,2:(N + 1)]
filled.contour(x = times, z = P, y = seq(0, R, length=N),
color = gray.colors,
xlab = "Time, days", ylab= "Distance, m",
main = "Prey density")
library(ReacTran)
N <- 50
Grid <- setup.grid.1D(x.up = 0, x.down = 1, N = N)
x1ini <- 1 + sin(2 * pi * Grid$x.mid)
x2ini <- rep(x = 3, times = N)
yini <- c(x1ini, x2ini)
brusselator1D <- function(t, y, parms) {
X1 <- y[1:N]
X2 <- y[(N+1):(2*N)]
dX1 <- 1 + X1ˆ2*X2 - 4*X1 +
tran.1D (C = X1, C.up = 1, C.down = 1,
D = 0.02, dx = Grid)$dC
dX2 <- 3*X1 - X1ˆ2*X2 +
tran.1D (C = X2, C.up = 3, C.down = 3,
D = 0.02, dx = Grid)$dC
list(c(dX1, dX2))
}
times <- seq(from = 0, to = 10, by = 0.1)
print(system.time(
out <- ode.1D(y = yini, func = brusselator1D,
times = times, parms = NULL, nspec = 2,
names = c("X1", "X2"), dimens = N)
))
par(mfrow = c(2, 2))
image(out, mfrow = NULL, grid
which = "X1", method =
image(out, mfrow = NULL, grid
which = "X1")
q()
