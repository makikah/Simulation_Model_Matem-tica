delta = a1^2 - 4*a2*a0
delta
raizes = polyroot(coeficients)
raizes
if (delta >=0){
raizes_reais <- Re( raizes )
raizes_reais
cat("Raízes reais: ", raizes_reais)
} else{R <- Mod(raizes[1])
R
cat("Raízes complexas com módulo ", R)
}
tmax = 50
Y = rep(0,tmax)
C = rep(0,tmax)
Iindu = rep(0,tmax)
Iauto = rep(0,tmax)
I = rep(0, tmax)
Y[1] = 1
Y[2] = 4
C[1] = 1
for (t in 3:tmax) {
C[t] = b*Y[t-1]
Iindu[t] = k*(Y[t-1] - Y[t-2])
Iauto[t] = A0*(1+g)^t
I[t] = Iindu[t] + Iauto[t]
Y[t] = C[t] + I[t]
}
t = seq(1, tmax, 1)
series <- data.frame(t, C, Iindu,Iauto, I, Y)
series
series_tidy <- gather( series, -t, key = "serie", value = "valor" )
names(series_tidy)
ggplot(series_tidy, aes(x = t, y = valor, group = serie, color = serie) ) +
geom_line(size = 1) + theme_light()
b = 0.9
k = 0.7
m1 = 0.03
m2 = 0.04
a2 = 1
a1 = -(b + k-(m1*b)-(m2*k))
a0 = (k-(m2*k))
A0 = 0.1
X0 = 0.6
g = 0.02
gx = 0.04
tmax = 50
Y = rep(0,tmax)
C = rep(0,tmax)
I1 = rep(0,tmax)
I2 = rep(0,tmax)
I = rep(0,tmax)
X = rep(0,tmax)
M = rep(0,tmax)
C[t] = b*Y[t-1]
I1[t] = k*(Y[t-1] - Y[t-2])
Y[1] = 1
Y[2] = 4
C[1] = 1
X[1] = 3
M[1] = 3
C[t] = b*Y[t-1]
C[1] = 2
C[t] = b*Y[t-1]
Y[1] = 2
C[t] = b*Y[t-1]
for (t in 3:tmax) {
C[t] = b*Y[t-1]
I1[t] = k*(Y[t-1] - Y[t-2])
I2[t] = A0*(1+g)^t
I[t] = I1[t] + I2[t]
X[t] = X0*(1+gx)^t
M[t] = m1*C[t] + m2*I[t]
Y[t] = C[t] + I[t] + X[t] - M[t]
}
t = seq(1, tmax, 1)
series = data.frame(t, Y, C, I1, I2, X, M)
series
series_tidy <- gather( series, -t, key = "serie", value = "valor" )
names(series_tidy)
ggplot(series_tidy, aes(x=t, y = valor, group=serie, color = serie) ) +
geom_line(size = 1) + theme_light()
b = 0.9
k = 0.5
m1 = 0.2
m2 = 0.4
a2 = 1
a1 = -(b + k-(m1*b)-(m2*k))
a0 = (k-(m2*k))
A0 = 0.1
g = 0.02
gx = 0.4
tmax = 50
Y = rep(0,tmax)
C = rep(0,tmax)
I1 = rep(0,tmax)
I2 = rep(0,tmax)
I = rep(0,tmax)
X = rep(0,tmax)
Y[1] = 2
Y[2] = 4
C[1] = 2
M[1] = 3
t = seq(1, tmax, 1)
series = data.frame(t, Y, C, I1, I2, X, M)
series
for (t in 3:tmax) {
C[t] = b*Y[t-1]
I1[t] = k*(Y[t-1] - Y[t-2])
I2[t] = A0*(1+g)^t
I[t] = I1[t] + I2[t]
X[t] = X0*(1+gx)^t
M[t] = m1*C[t] + m2*I[t]
Y[t] = C[t] + I[t] + X[t] - M[t]
}
t = seq(1, tmax, 1)
series = data.frame(t, Y, C, I1, I2, X, M)
series
series_tidy <- gather( series, -t, key = "serie", value = "valor" )
names(series_tidy)
ggplot(series_tidy, aes(x=t, y = valor, group=serie, color = serie) ) +
geom_line(size = 1) + theme_light()
b = 0.9
k = 0.6
m1 = 0.05
m2 = 0.01
a2 = 1
a1 = -(b + k-(m1*b)-(m2*k))
a0 = (k-(m2*k))
A0 = 0.1
X0 = 0.6
g = 0.02
gx = 0.03
tmax = 50
Y = rep(0,tmax)
C = rep(0,tmax)
I1 = rep(0,tmax)
I2 = rep(0,tmax)
I = rep(0,tmax)
X = rep(0,tmax)
M = rep(0,tmax)
Y[1] = 2
Y[2] = 4
C[1] = 2
X[1] = 3
M[1] = 3
for (t in 3:tmax) {
C[t] = b*Y[t-1]
I1[t] = k*(Y[t-1] - Y[t-2])
I2[t] = A0*(1+g)^t
I[t] = I1[t] + I2[t]
X[t] = X0*(1+gx)^t
M[t] = m1*C[t] + m2*I[t]
Y[t] = C[t] + I[t] + X[t] - M[t]
}
t = seq(1, tmax, 1)
series = data.frame(t, Y, C, I1, I2, X, M)
series
series_tidy <- gather( series, -t, key = "serie", value = "valor" )
names(series_tidy)
ggplot(series_tidy, aes(x=t, y = valor, group=serie, color = serie) ) +
geom_line(size = 1) + theme_light()
bp <- data.frame(t,M,X)
pb_painel <- gather( bp, -t, key = "serie", value = "valor" )
names(pb_painel)
ggplot(pb_painel, aes(x=t, y = valor, group=serie, color = serie) ) +
geom_line(size=1) + theme_light()
b = 0.9
k = 0.6
m1 = 0.05
m2 = 0.01
a2 = 1
a1 = -(b + k-(m1*b)-(m2*k))
a0 = (k-(m2*k))
condicao1 = 1 + a1 + a0 > 0
condicao2 = 1 - a1 + a0 > 0
condicao3 = a0 < 1
condicoes = condicao1 & condicao2 & condicao3
if (condicoes){
print("Trajetória estável")
} else {
print("Trajetória instável")
}
delta = a1^2 - 4*a2*a0
delta
coeficients = c(a0, a1, a2)
raizes = polyroot(coeficients)
raizes
if (delta >=0){
raizes_reais <- Re( raizes )
raizes_reais
cat("Raízes reais: ", raizes_reais)
} else{
R <- Mod(raizes[1])
R
cat("Raízes complexas com módulo ", R)
}
B = 20
m = 0.5
U = 5
n = 0.4
L = 0.7
a2 = 1
a1 = -(m + 1)
a0 = (m + n)
condicao1 = 1 + a1 + a0 > 0
condicao2 = 1 - a1 + a0 > 0
condicao3 = a0 < 1
condicoes = condicao1 & condicao2 & condicao3
if (condicoes){
print("Trajetória estável")
} else {
print("Trajetória instável")
}
delta = a1^2 - 4*a2*a0
delta
coeficients = c(a0, a1, a2)
raizes = polyroot(coeficients)
raizes
if (delta >=0){
raizes_reais <- Re( raizes )
raizes_reais
cat("Raízes reais: ", raizes_reais)
} else{
R <- Mod(raizes[1])
R
cat("Raízes complexas com módulo ", R)
}
tmax = 50
P = rep(0, tmax)
C = rep(0, tmax)
A = rep(0, tmax)
K = rep(0, tmax)
I = rep(0, tmax)
Y = rep(0, tmax)
K[1] = 2
I[1] = 2
C[1] = 2
for (t in 2:tmax){ #t começa em 3
I[t] = m*(A[t-1]+ B) - n*(K[t-1])
A[t] = I[t-1]
C[t] = (L*P[t-1]) + B
P[t] = A[t]+C[t-1]
K[t] = A[t]- U +K[t-1]
}
t = seq(1, tmax, 1)
seriees = data.frame(t, I, A, C, P, K)
series_tidy = gather( seriees, -t, key = "serie", value = "valor" )
names(series_tidy)
ggplot(series_tidy, aes(x=t, y = valor, group=serie, color = serie) ) +
geom_line(size=1) + theme_light()
B = 20
m = 1.5
U = 5
n = 1.4
L = 0.7
a2 = 1
a1 = -(m + 1)
a0 = (m + n)
condicao1 = 1 + a1 + a0 > 0
condicao2 = 1 - a1 + a0 > 0
condicao3 = a0 < 1
condicoes = condicao1 & condicao2 & condicao3
if (condicoes){
print("Trajetória estável")
} else {
print("Trajetória instável")
}
delta = a1^2 - 4*a2*a0
delta
coeficients = c(a0, a1, a2)
raizes = polyroot(coeficients)
raizes
if (delta >=0){
raizes_reais <- Re( raizes )
raizes_reais
cat("Raízes reais: ", raizes_reais)
} else{
R <- Mod(raizes[1])
R
cat("Raízes complexas com módulo ", R)
}
if (delta >= 0){
raizes_reais <- Re( raizes )
raizes_reais
cat("Raízes reais: ", raizes_reais)
} else{
R = Mod(raizes[1])
R
cat("Raízes complexas com módulo ", R)
}
tmax = 50
P = rep(0, tmax)
C = rep(0, tmax)
A = rep(0, tmax)
K = rep(0, tmax)
I = rep(0, tmax)
Y = rep(0, tmax)
K[1] = 2
I[1] = 2
C[1] = 2
for (t in 2:tmax){ #t começa em 3
I[t] = m*(A[t-1]+ B) - n*(K[t-1])
A[t] = I[t-1]
C[t] = (L*P[t-1]) + B
P[t] = A[t]+C[t-1]
K[t] = A[t]- U +K[t-1]
}
t = seq(1, tmax, 1)
seriees = data.frame(t, I, A, C, P, K)
series_tidy = gather( seriees, -t, key = "serie", value = "valor" )
names(series_tidy)
ggplot(series_tidy, aes(x=t, y = valor, group=serie, color = serie) ) +
geom_line(size=1) + theme_light()
serie.pb.gather
serie.pb.gather
head(serie.pb.gather)
''serie.pb.gatherobjeto
## serie.pb.gatherobjeto
tmax = 50
X = rep(0,tmax)      #exportação
M = rep(0,tmax)      #importação
X[1] = 1
X[2] = 4
M[1] = 2
M[2] = 3
for (t in 2:tmax){
M[t] = m*Y[t-1]
X[t] = X0*((1+gx)^t)
}
t = seq(1, tmax, 1)
bpp
ggplot(serie.pb.gather, aes(x = t, y = serie.pb.gather$valor,
group = serie.pb.gather$serie, color = serie) ) +
geom_line(size = 1) + theme_light()
ggplot(serie.pb.gather, aes(x = t, y = serie.pb.gather$valor,
group = serie.pb.gather$serie,
color = serie.pb.gather$serie) ) +
geom_line(size = 1) + theme_light()
q()
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
fig.width = 10, fig.height = 6)
library(ggplot2)   # Para gráficos
library(tidyr)
library(dplyr) # Pipe operator
library(matlib)
library(limSolve)
library(mosaic)
??tidyr
?tidyr
?matlib
?limSolve
?mosaic
wG[1] = 27
wG = rep(0, tmax)
lambda0 = 0.2
lambda1 = 0.2
lambda2 = 0.6
v = 1
s = 0.2
tau = 0.4
r = 0.04
a1 = (1-s)*(1-tau) + v
a2 = s*(1-tau) - v
tmax = 50
Y = rep(0, tmax)
B = rep(0, tmax)
G = rep(0, tmax)
I = rep(0, tmax)
wG = rep(0, tmax)
Y[1] = 120
Y[2] = 112
B[1] = 135
B[2] = 142
G[1] = 14.45
G[2] = 10.63
G[3] = 25
wG[1] = 27
wG[2] = 25
wG[3] = 35.1
for (t in 4:tmax) {
C[t] = (1-s)*Y[t-1] + s*Y[t-2]
Y[t] = Y[t] - T[t]
T[t] = tau*Y[t]
I[t] = v*(Y[t-1] - Y[t-2])
B[t] = (1-r)*B[t-1] - (1-tau)*Y[t] + G[t] + G[t]
Y[t] = a1*Y[t-1] + a2*Y[t-2]+lambda0*G[t] + lambda1*G[t-1] + lambda2*G[t-2] + wG[t]
}
C = rep(0, tmax)
Y = rep(0, tmax)
B = rep(0, tmax)
T = rep(0, tmax)
G = rep(0, tmax)
I = rep(0, tmax)
wG = rep(0, tmax)
C[1] = 18
I[1] = 10
Y[1] = 120
Y[2] = 112
B[1] = 135
B[2] = 142
G[1] = 14.45
G[2] = 10.63
G[3] = 25
wG[1] = 27
wG[2] = 25
wG[3] = 35.1
for (t in 4:tmax) {
C[t] = (1-s)*Y[t-1] + s*Y[t-2]
Y[t] = Y[t] - T[t]
T[t] = tau*Y[t]
I[t] = v*(Y[t-1] - Y[t-2])
B[t] = (1-r)*B[t-1] - (1-tau)*Y[t] + G[t] + G[t]
Y[t] = a1*Y[t-1] + a2*Y[t-2]+lambda0*G[t] + lambda1*G[t-1] + lambda2*G[t-2] + wG[t]
}
t = seq(1, tmax, 1)
series = data.frame(t, C, Y, T, I, B, Y)
series_gather = gather(series, -t, key = "serie", value = "valor")
ggplot(series_gather, aes(x = t, y = series_gather$valor,
group = series_gather$serie,
color = series_gather$serie)) +
geom_line(size = 1) + theme_light()
lambda0 = 0.4
lambda1 = 0.3
lambda2 = 0.3
v = 1
s = 0.2
tau = 0.4
r = 0.04
a1 = (1-s)*(1-tau) + v
a2 = s*(1-tau) - v
tmax = 50
C = rep(0, tmax)
Y = rep(0, tmax)
B = rep(0, tmax)
T = rep(0, tmax)
G = rep(0, tmax)
I = rep(0, tmax)
wG = rep(0, tmax)
C[1] = 18
I[1] = 10
Y[1] = 120
Y[2] = 112
B[1] = 135
B[2] = 142
G[1] = 14.45
G[2] = 10.63
G[3] = 25
wG[1] = 27
wG[2] = 25
wG[3] = 35.1
for (t in 4:tmax) {
C[t] = (1-s)*Y[t-1] + s*Y[t-2]
Y[t] = Y[t] - T[t]
T[t] = tau*Y[t]
I[t] = v*(Y[t-1] - Y[t-2])
B[t] = (1-r)*B[t-1] - (1-tau)*Y[t] + G[t] + G[t]
Y[t] = a1*Y[t-1] + a2*Y[t-2]+lambda0*G[t] + lambda1*G[t-1] + lambda2*G[t-2] + wG[t]
}
t = seq(1, tmax, 1)
series = data.frame(t, C, Y, T, I, B, Y)
series_gather = gather(series, -t, key = "serie", value = "valor")
ggplot(series_gather, aes(x = t, y = series_gather$valor,
group = series_gather$serie,
color = series_gather$serie)) +
geom_line(size = 1) + theme_light()
set.seed(123)
lambda0 = 0.5
lambda1 = 0.25
lambda2 = 0.25
v = 1
s = 0.2
tau = 0.4
r = 0.04
a1 = (1-s)*(1-tau) + v
a2 = s*(1-tau) - v
tmax = 50
C = rep(0, tmax)
Y = rep(0, tmax)
B = rep(0, tmax)
T = rep(0, tmax)
G = rep(0, tmax)
I = rep(0, tmax)
wG = rep(0, tmax)
C[1] = 18
I[1] = 10
Y[1] = 120
Y[2] = 112
B[1] = 135
B[2] = 142
G[1] = 14.45
G[2] = 10.63
G[3] = 25
wG[1] = 27
wG[2] = 25
wG[3] = 35.1
for (t in 4:tmax) {
C[t] = (1-s)*Y[t-1] + s*Y[t-2]
Y[t] = Y[t] - T[t]
T[t] = tau*Y[t]
I[t] = v*(Y[t-1] - Y[t-2])
B[t] = (1-r)*B[t-1] - (1-tau)*Y[t] + G[t] + G[t]
Y[t] = a1*Y[t-1] + a2*Y[t-2]+lambda0*G[t] + lambda1*G[t-1] + lambda2*G[t-2] + wG[t]
}
t = seq(1, tmax, 1)
series = data.frame(t, C, Y, T, I, B, Y)
series_gather = gather(series, -t, key = "serie", value = "valor")
ggplot(series_gather, aes(x = t, y = series_gather$valor,
group = series_gather$serie,
color = series_gather$serie)) +
geom_line(size = 1) + theme_light()
q()
